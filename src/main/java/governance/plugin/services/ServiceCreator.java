package governance.plugin.services;

import governance.plugin.ServiceGovernanceMojo;
import governance.plugin.rxt.AbstractArtifactCreator;
import governance.plugin.GovernanceSOAPMessageCreator;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.logging.Log;

/**
 * Created by jayanga on 2/9/14.
 */
public class ServiceCreator extends AbstractArtifactCreator {
    Log logger;
    public ServiceCreator(Log logger, String endPointRef, String genericArtifactManagerEndPointRef) throws MojoExecutionException {
        super(endPointRef, genericArtifactManagerEndPointRef);
        this.logger = logger;
    }

    @Override
    public boolean create(Object[] parameters) throws MojoExecutionException {

        if (parameters.length != 4){
            throw new MojoExecutionException("Service creator expects 'name', 'version', 'type' and 'description' as parameters");
        }

        String name = (String)parameters[0];
        String version = (String)parameters[1];
        String type = (String)parameters[2];
        String description = (String)parameters[3];
        description = (description != "")? description: "Generated by governance maven plugin.";

        String servicePath = getArtifactResourcePath(new String[]{name, version});

        String createServiceRequst =
                ServiceGovernanceSOAPMessageCreator.createAddServiceRequest(name
                        , version
                        , type
                        , description);

        logger.debug("Service creation request. [" + createServiceRequst + "]");

        boolean isServiceCreated = super.createArtifact(servicePath, createServiceRequst);

        if (logger.isInfoEnabled()){
            if (isServiceCreated){
                logger.info("Request sent to create Service: "+ name);
            }else{
                logger.info("Service already available: " + name);
            }
        }

        return isServiceCreated;
    }

    @Override
    public String getArtifactResourcePath(String[] parameters) throws MojoExecutionException {
        if (parameters.length != 2){
            throw new MojoExecutionException("Service Resource Path expects 2 parameters: " +
                    "'name' and 'version'");
        }

        String name = parameters[0];
        String version = parameters[1];

        return ServiceGovernanceMojo.GREG_SERVICE_RESOURCE_PATH  + name + "/" + version;
    }
}
