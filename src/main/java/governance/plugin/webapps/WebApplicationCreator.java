package governance.plugin.webapps;

import governance.plugin.ServiceGovernanceMojo;
import governance.plugin.rxt.AbstractArtifactCreator;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.logging.Log;

import java.util.Map;

/**
 * Created by jayanga on 2/11/14.
 */
public class WebApplicationCreator extends AbstractArtifactCreator {
    Log logger;
    public WebApplicationCreator(Log logger, String endPointRef, String genericArtifactManagerEndPointRef) throws MojoExecutionException {
        super(endPointRef, genericArtifactManagerEndPointRef);
        this.logger = logger;
    }

    public boolean create(Map<String, String> parameters) throws MojoExecutionException {
        String name = parameters.get("name");
        String namespace = parameters.get("namespace");
        String serviceclass = parameters.get("serviceclass");
        String displayname = parameters.get("displayname");
        String version = parameters.get("version");
        String description = parameters.get("description");

        description = (description != null && description != "")? description: "generated by maven-governance-plugin.";

        String servicePath = getArtifactResourcePath(new String[]{name, namespace});

        String createWebAppRequst =
                WebAppGovernanceSOAPMessageCreator.createAddWebAppRequest(name
                        , namespace
                        , serviceclass
                        , displayname
                        , version
                        , description);

        logger.debug("Web App creation request. [" + createWebAppRequst + "]");

        boolean isServiceCreated = super.createArtifact(servicePath, createWebAppRequst);

        if (logger.isInfoEnabled()){
            if (isServiceCreated){
                logger.info("Request sent to create Web Application: "+ name);
            }else{
                logger.info("Web Application already available: " + name);
            }
        }

        return isServiceCreated;
    }

    @Override
    public boolean create(Object[] parameters) throws MojoExecutionException {
        return false;
    }

    @Override
    public String getArtifactResourcePath(String[] parameters) throws MojoExecutionException {
        String name = parameters[0];
        String namespace = parameters[1];

        name = name.trim();
        namespace = namespace.trim();

        String[] path = namespace.substring("http://".length()).split("[.]");
        StringBuilder sb = new StringBuilder();
        for (int i = path.length - 1; i >= 0 ; i--){
            if (path[i].trim().length() > 0) sb.append(path[i].trim() + "/");
        }

        return ServiceGovernanceMojo.GREG_WEBAPP_RESOURCE_PATH  + sb.toString() + name;
    }
}
